import logging
from typing import Dict, Any
from decimal import Decimal
from django.conf import settings
import telebot
from analytics.models import DailySalesReport
from .models import TelegramUserProfile

logger = logging.getLogger(__name__)


class AnalyticsNotificationService:
    def __init__(self):
        self.bot = telebot.TeleBot(settings.TELEGRAM_BOT_TOKEN)

    def format_daily_report(self, report: DailySalesReport) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        message = f"üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ {report.date}\n\n"

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        message += f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {report.total_revenue:,.2f}‚ÇΩ\n"
        message += f"üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {report.total_sales}\n"
        message += f"üõç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {report.total_orders}\n"

        if report.average_order_value:
            message += f"üíé –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {report.average_order_value:,.2f}‚ÇΩ\n"

        if report.best_selling_product:
            message += (
                f"\nüèÜ –õ—É—á—à–∏–π —Ç–æ–≤–∞—Ä: {report.best_selling_product.product_name}\n"
            )

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –¥–Ω–µ–º
        previous_report = report.get_previous_day_stats()
        if previous_report:
            revenue_change = (
                (report.total_revenue - previous_report.total_revenue)
                / previous_report.total_revenue
                * 100
                if previous_report.total_revenue
                else 0
            )
            sales_change = (
                (report.total_sales - previous_report.total_sales)
                / previous_report.total_sales
                * 100
                if previous_report.total_sales
                else 0
            )

            message += f"\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—á–µ—Ä–∞:\n"
            message += f"–í—ã—Ä—É—á–∫–∞: {revenue_change:+.1f}%\n"
            message += f"–ü—Ä–æ–¥–∞–∂–∏: {sales_change:+.1f}%\n"

        return message

    def send_daily_report(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id
            profile = TelegramUserProfile.objects.select_related("user").get(
                user_id=user_id, is_active=True
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
            report = (
                DailySalesReport.objects.filter(user_id=user_id)
                .select_related("best_selling_product")
                .first()
            )

            if not report:
                logger.warning(f"No daily report found for user {user_id}")
                return False

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.format_daily_report(report)
            self.bot.send_message(
                chat_id=profile.telegram_chat_id, text=message, parse_mode="HTML"
            )

            logger.info(f"Successfully sent daily report to user {user_id}")
            return True

        except TelegramUserProfile.DoesNotExist:
            logger.error(f"Telegram profile not found for user {user_id}")
            return False
        except Exception as e:
            logger.error(f"Error sending notification to user {user_id}: {str(e)}")
            return False

    def send_bulk_daily_reports(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        active_profiles = TelegramUserProfile.objects.filter(is_active=True)

        for profile in active_profiles:
            self.send_daily_report(profile.user_id)
